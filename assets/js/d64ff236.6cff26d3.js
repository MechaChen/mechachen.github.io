"use strict";(self.webpackChunkbenson_doc=self.webpackChunkbenson_doc||[]).push([[3507],{3905:(t,e,n)=>{n.d(e,{Zo:()=>m,kt:()=>c});var a=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function l(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?l(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function o(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},l=Object.keys(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var d=a.createContext({}),p=function(t){var e=a.useContext(d),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},m=function(t){var e=p(t.components);return a.createElement(d.Provider,{value:e},t.children)},k="mdxType",s={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},u=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,l=t.originalType,d=t.parentName,m=o(t,["components","mdxType","originalType","parentName"]),k=p(n),u=r,c=k["".concat(d,".").concat(u)]||k[u]||s[u]||l;return n?a.createElement(c,i(i({ref:e},m),{},{components:n})):a.createElement(c,i({ref:e},m))}));function c(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=n.length,i=new Array(l);i[0]=u;var o={};for(var d in e)hasOwnProperty.call(e,d)&&(o[d]=e[d]);o.originalType=t,o[k]="string"==typeof t?t:r,i[1]=o;for(var p=2;p<l;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2164:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>d,contentTitle:()=>i,default:()=>s,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const l={sidebar_position:3.5,sidebar_label:"[Google Docs] Optimization - Binary encoding",title:"[Google Docs] Optimization - Binary encoding",tags:["System Design","Optimization","Binary encoding"]},i=void 0,o={unversionedId:"Plan/google-doc-system-optimization-binary-encoding",id:"Plan/google-doc-system-optimization-binary-encoding",title:"[Google Docs] Optimization - Binary encoding",description:"Why we need Encoding?",source:"@site/docs/Plan/google-doc-system-optimization-binary-encoding.mdx",sourceDirName:"Plan",slug:"/Plan/google-doc-system-optimization-binary-encoding",permalink:"/docs/Plan/google-doc-system-optimization-binary-encoding",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Plan/google-doc-system-optimization-binary-encoding.mdx",tags:[{label:"System Design",permalink:"/docs/tags/system-design"},{label:"Optimization",permalink:"/docs/tags/optimization"},{label:"Binary encoding",permalink:"/docs/tags/binary-encoding"}],version:"current",lastUpdatedAt:1748761887,formattedLastUpdatedAt:"Jun 1, 2025",sidebarPosition:3.5,frontMatter:{sidebar_position:3.5,sidebar_label:"[Google Docs] Optimization - Binary encoding",title:"[Google Docs] Optimization - Binary encoding",tags:["System Design","Optimization","Binary encoding"]},sidebar:"tutorialSidebar",previous:{title:"[Google Docs] Interface",permalink:"/docs/Plan/google-doc-system-interface"},next:{title:"[Google Docs] Optimization - Undo/Redo",permalink:"/docs/Plan/google-doc-system-optimization-undo-redo"}},d={},p=[{value:"Why we need Encoding?",id:"why-we-need-encoding",level:2},{value:"How encoding works in <code>Yjs</code> and <code>Lexical</code>?",id:"how-encoding-works-in-yjs-and-lexical",level:2},{value:"1. Lexical Editor generated data",id:"1-lexical-editor-generated-data",level:3},{value:"2. @lexical/yjs convert Lexical diff to Yjs Doc",id:"2-lexicalyjs-convert-lexical-diff-to-yjs-doc",level:3},{value:"What does a Struct look like in JS?",id:"what-does-a-struct-look-like-in-js",level:4},{value:"3. Yjs generates binary update (lib0 encoding)",id:"3-yjs-generates-binary-update-lib0-encoding",level:3},{value:"How <code>UpdateEncoderV2</code> writes <code>Uint8Array</code>",id:"how-updateencoderv2-writes-uint8array",level:4},{value:"Code Demo: Try it yourself",id:"code-demo-try-it-yourself",level:4},{value:"4. Transmit to server &amp; other Peers",id:"4-transmit-to-server--other-peers",level:3},{value:"5. Peer reconstruction",id:"5-peer-reconstruction",level:3},{value:"Summary",id:"summary",level:3},{value:"References",id:"references",level:2}],m={toc:p},k="wrapper";function s(t){let{components:e,...n}=t;return(0,r.kt)(k,(0,a.Z)({},m,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("br",null),(0,r.kt)("h2",{id:"why-we-need-encoding"},"Why we need Encoding?"),(0,r.kt)("p",null,"Since in collaborative editing, there will be lots of updates, and there are 2 ways to send updates data:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"JSON")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Binary"))),(0,r.kt)("br",null),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"type"),(0,r.kt)("th",{parentName:"tr",align:null},"JSON"),(0,r.kt)("th",{parentName:"tr",align:null},"Binary"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Readability"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Efficiency"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705")))),(0,r.kt)("br",null),(0,r.kt)("br",null),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"JSON")," is more readable, but terrible for efficiency, because",(0,r.kt)("inlineCode",{parentName:"li"},"JSON")," contains lots of redundant information, like:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"curly braces ",(0,r.kt)("inlineCode",{parentName:"li"},"{}")),(0,r.kt)("li",{parentName:"ul"},"double quotes ",(0,r.kt)("inlineCode",{parentName:"li"},'""')),(0,r.kt)("li",{parentName:"ul"},"commas ",(0,r.kt)("inlineCode",{parentName:"li"},",")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"key")," name")))),(0,r.kt)("br",null),(0,r.kt)("br",null),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"And ",(0,r.kt)("inlineCode",{parentName:"li"},"Binary")," is more efficient, we only need to send binary data, which is the same format when transfer through the network,\nand we don't need to add redundant information for readability.")),(0,r.kt)("br",null),(0,r.kt)("br",null),(0,r.kt)("h2",{id:"how-encoding-works-in-yjs-and-lexical"},"How encoding works in ",(0,r.kt)("inlineCode",{parentName:"h2"},"Yjs")," and ",(0,r.kt)("inlineCode",{parentName:"h2"},"Lexical"),"?"),(0,r.kt)("p",null,"There are 5 steps to send updates data from Lexical to Yjs:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Lexical JSON \u2192 Yjs struct (JS object)"),(0,r.kt)("li",{parentName:"ol"},"Yjs struct \u2192 lib0 encoding"),(0,r.kt)("li",{parentName:"ol"},"lib0 encoding \u2192 WebSocket"),(0,r.kt)("li",{parentName:"ol"},"WebSocket \u2192 lib0 decoding"),(0,r.kt)("li",{parentName:"ol"},"lib0 decoding \u2192 Yjs struct"),(0,r.kt)("li",{parentName:"ol"},"Yjs struct \u2192 Lexical JSON")),(0,r.kt)("br",null),(0,r.kt)("br",null),(0,r.kt)("p",null,"Here we will use insert ",(0,r.kt)("inlineCode",{parentName:"p"},"A")," as an example to show how encoding works in ",(0,r.kt)("inlineCode",{parentName:"p"},"Yjs")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Lexical"),"."),(0,r.kt)("h3",{id:"1-lexical-editor-generated-data"},"1. Lexical Editor generated data"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Phase"),(0,r.kt)("th",{parentName:"tr",align:null},"Detail"),(0,r.kt)("th",{parentName:"tr",align:null},"Example"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Lexical node tree")),(0,r.kt)("td",{parentName:"tr",align:null},'Editor internal "DOM-like" tree structure'),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"js\\n{\\n  root: {\\n    type: 'root',\\n    children: [\\n      { type: 'paragraph', children: [ { type: 'text', text: 'A' } ] }\\n    ]\\n  }\\n}\\n"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Lexical update payload")),(0,r.kt)("td",{parentName:"tr",align:null},"JSON difference when ",(0,r.kt)("inlineCode",{parentName:"td"},"onUpdate")," is triggered (insert/delete/modify which node)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"js\\n{\\n  mutations: [\\n    { op: 'insert_text', nodeKey: 'node#42', offset: 0, text: 'A' }\\n  ],\\n  selection: { anchor: 1, focus: 1 }\\n}\\n"))))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"These are still ",(0,r.kt)("strong",{parentName:"p"},"pure JSON / JS objects"),", large in size, and only for internal use by the frontend.")),(0,r.kt)("br",null),(0,r.kt)("br",null),(0,r.kt)("h3",{id:"2-lexicalyjs-convert-lexical-diff-to-yjs-doc"},"2. @lexical/yjs convert Lexical diff to Yjs Doc"),(0,r.kt)("p",null,"In 2nd step, the @lexical/yjs will convert update JSON payload to Yjs struct object."),(0,r.kt)("br",null),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Step"),(0,r.kt)("th",{parentName:"tr",align:null},"Content"),(0,r.kt)("th",{parentName:"tr",align:null},"Example"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Map to Yjs struct")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"paragraph")," \u2192 ",(0,r.kt)("inlineCode",{parentName:"td"},"Y.XmlElement"),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"td"},"text node")," \u2192 ",(0,r.kt)("inlineCode",{parentName:"td"},"Y.XmlText")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Y.XmlText"),' content becomes "A"')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Write to Y.Doc")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"doc.transact(() => yText.insert(0, 'A'))")),(0,r.kt)("td",{parentName:"tr",align:null},"Yjs internally creates a struct for clientId=1:",(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"td"},"<1,clock=0,len=1,type=text,data='A'>"))))),(0,r.kt)("br",null),(0,r.kt)("br",null),(0,r.kt)("h4",{id:"what-does-a-struct-look-like-in-js"},"What does a Struct look like in JS?"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"{\n  id: { client: 1, clock: 0 },\n  length: 1,                  // 1 text unit\n  left: null, right: null,    // inserted at the beginning\n  parent: yDoc.getText('t'),  // belongs to Y.XmlText\n  parentSub: null,\n  content: {                   // ContentString\n    constructor: ContentString,\n    str: 'A'\n  }\n}\n")),(0,r.kt)("br",null),(0,r.kt)("br",null),(0,r.kt)("h3",{id:"3-yjs-generates-binary-update-lib0-encoding"},"3. Yjs generates binary update (lib0 encoding)"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Phase"),(0,r.kt)("th",{parentName:"tr",align:null},"Content"),(0,r.kt)("th",{parentName:"tr",align:null},"Example"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"encodeStateAsUpdateV2"))),(0,r.kt)("td",{parentName:"tr",align:null},"Compare peer's stateVector to find missing structs"),(0,r.kt)("td",{parentName:"tr",align:null},"Peer has no data yet, so package everything")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"lib0 writes bytes")),(0,r.kt)("td",{parentName:"tr",align:null},"Using ",(0,r.kt)("inlineCode",{parentName:"td"},"UpdateEncoderV2"),":",(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"td"},"writeVarUint(clientId=1)"),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"td"},"writeVarUint(clock=0)"),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"td"},"writeVarString('A')")),(0,r.kt)("td",{parentName:"tr",align:null},"Get ",(0,r.kt)("strong",{parentName:"td"},"Uint8Array")," like:",(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"td"},"[ 12, 1, 0, 65 ]"),(0,r.kt)("br",null),"(actual will have header/CRC, shown here for illustration)")))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"This is already ",(0,r.kt)("strong",{parentName:"p"},"extremely small binary"),", typically only 5-10% of the original JSON size.")),(0,r.kt)("br",null),(0,r.kt)("br",null),(0,r.kt)("h4",{id:"how-updateencoderv2-writes-uint8array"},"How ",(0,r.kt)("inlineCode",{parentName:"h4"},"UpdateEncoderV2")," writes ",(0,r.kt)("inlineCode",{parentName:"h4"},"Uint8Array")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Yjs Update V2")," serialization rules (highly simplified)"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Order"),(0,r.kt)("th",{parentName:"tr",align:null},"Write"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Value in this example"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"\u2460"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"writeVarUint(#clients)")),(0,r.kt)("td",{parentName:"tr",align:null},"How many clients in this update"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"\u2461"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"writeVarUint(clientId)")),(0,r.kt)("td",{parentName:"tr",align:null},"User ",(0,r.kt)("inlineCode",{parentName:"td"},"1")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"\u2462"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"writeVarUint(#structs)")),(0,r.kt)("td",{parentName:"tr",align:null},"How many new structs for this client"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"\u2463"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"info")," 1 byte"),(0,r.kt)("td",{parentName:"tr",align:null},"bit-flags: has left/right/parentSub..."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0x00")," (= none)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"\u2464"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"writeVarUint(clock)")),(0,r.kt)("td",{parentName:"tr",align:null},"Starting clock of this struct"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"\u2465"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"writeVarUint(len)")),(0,r.kt)("td",{parentName:"tr",align:null},"struct length"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"\u2466"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"writeVarString(parent type)")),(0,r.kt)("td",{parentName:"tr",align:null},"0 \u2192 directly under root"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"\u2467"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"writeVarUint(contentType)")),(0,r.kt)("td",{parentName:"tr",align:null},"4 represents ",(0,r.kt)("em",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"4"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"\u2468"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"writeVarUint(str.length)")),(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"\u2469"),(0,r.kt)("td",{parentName:"tr",align:null},"UTF-8 bytes"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"'A'")," \u2192 ",(0,r.kt)("inlineCode",{parentName:"td"},"0x41")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0x41"))))),(0,r.kt)("br",null),(0,r.kt)("br",null),(0,r.kt)("p",null,"Combined as\n",(0,r.kt)("inlineCode",{parentName:"p"},"01 01 01 00 00 00 04 01 41")," (10 bytes)"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("em",{parentName:"p"},"Variable-length integers")," (varUint) all use ",(0,r.kt)("strong",{parentName:"p"},"lib0"),"'s 7-bit continuation format:",(0,r.kt)("br",null),"\n0-127 \u2192 1 byte, 128-16383 \u2192 2 bytes ..., so all values fall in the ",(0,r.kt)("inlineCode",{parentName:"p"},"0x00-0x7F")," range.")),(0,r.kt)("br",null),(0,r.kt)("br",null),(0,r.kt)("admonition",{title:"How Yjs struct looks like in JS object & binary format?",type:"note"},(0,r.kt)("br",null),(0,r.kt)("br",null),(0,r.kt)("table",{parentName:"admonition"},(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Level"),(0,r.kt)("th",{parentName:"tr",align:null},"Content"),(0,r.kt)("th",{parentName:"tr",align:null},"Readable Form"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Yjs Object (JS)")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"new Item(id, left, right, parent, parentSub, content, ...)")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"\u27e8client 1, clock 0, len 1, content='A'\u27e9"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Binary Stream (Uint8Array)")),(0,r.kt)("td",{parentName:"tr",align:null},"Written by ",(0,r.kt)("strong",{parentName:"td"},"UpdateEncoderV2")," using variable-length integers & flags"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"01 01 01 00 00 00 04 01 41"),(0,r.kt)("br",null),"(hex ",(0,r.kt)("inlineCode",{parentName:"td"},"01 01 01 00 00 00 04 01 41"),")")))),(0,r.kt)("blockquote",{parentName:"admonition"},(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Top row"),' is the "semantic" form we humans read;\n',(0,r.kt)("strong",{parentName:"p"},"Bottom row")," is the actual bytes transmitted over the network (using the ",(0,r.kt)("em",{parentName:"p"},"simplest")," ",(0,r.kt)("strong",{parentName:"p"},"1 byte 'A'")," insertion as an example)."))),(0,r.kt)("br",null),(0,r.kt)("h4",{id:"code-demo-try-it-yourself"},"Code Demo: Try it yourself"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import * as Y from 'yjs'\n\nconst doc = new Y.Doc()\ndoc.clientID = 1                // For demonstration, keep ID as 1\ndoc.getText('t').insert(0, 'A') // Insert one letter\n\nconst u8 = Y.encodeStateAsUpdateV2(doc) // Uint8Array\nconsole.log([...u8])   // Might print [1,1,1,0,0,0,4,1,65]\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"When you send ",(0,r.kt)("inlineCode",{parentName:"p"},"applyUpdateV2(peerDoc, u8)")," to another browser,\nit will reconstruct the same ",(0,r.kt)("inlineCode",{parentName:"p"},"A"),", exactly demonstrating the round trip of ",(0,r.kt)("strong",{parentName:"p"},'"semantic struct \u2192 binary stream \u2192 semantic struct"'),".")),(0,r.kt)("br",null),(0,r.kt)("br",null),(0,r.kt)("h3",{id:"4-transmit-to-server--other-peers"},"4. Transmit to server & other Peers"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Step"),(0,r.kt)("th",{parentName:"tr",align:null},"Transport Layer"),(0,r.kt)("th",{parentName:"tr",align:null},"Example"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"WebSocket send")),(0,r.kt)("td",{parentName:"tr",align:null},"Directly use ",(0,r.kt)("inlineCode",{parentName:"td"},"socket.send(uint8Array)")," (Binary Frame)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"on-wire")," = same Uint8Array")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Server relay")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"Option A")," broadcast unchanged",(0,r.kt)("br",null),(0,r.kt)("em",{parentName:"td"},"Option B")," merge updates"),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("br",null),(0,r.kt)("br",null),(0,r.kt)("h3",{id:"5-peer-reconstruction"},"5. Peer reconstruction"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Phase"),(0,r.kt)("th",{parentName:"tr",align:null},"Content"),(0,r.kt)("th",{parentName:"tr",align:null},"Example"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"applyUpdateV2(doc, uint8Array)"))),(0,r.kt)("td",{parentName:"tr",align:null},"Yjs parses binary, creates same struct"),(0,r.kt)("td",{parentName:"tr",align:null},'Text "A" appears in peer\'s ',(0,r.kt)("inlineCode",{parentName:"td"},"Y.XmlText"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"@lexical/yjs reflects to editor")),(0,r.kt)("td",{parentName:"tr",align:null},"Map Yjs changes \u2192 Lexical command"),(0,r.kt)("td",{parentName:"tr",align:null},"Peer's Lexical ",(0,r.kt)("inlineCode",{parentName:"td"},"editor.update(() => \u2026)"),", inserts ",(0,r.kt)("inlineCode",{parentName:"td"},"A")," in paragraph")))),(0,r.kt)("br",null),(0,r.kt)("br",null),(0,r.kt)("h3",{id:"summary"},"Summary"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Complete flow:"),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"Lexical JSON")," \u2192 ",(0,r.kt)("strong",{parentName:"p"},"Yjs struct")," \u2192 ",(0,r.kt)("strong",{parentName:"p"},"lib0 encoding")," \u2192 ",(0,r.kt)("strong",{parentName:"p"},"WebSocket")," \u2192 ",(0,r.kt)("strong",{parentName:"p"},"lib0 decoding")," \u2192 ",(0,r.kt)("strong",{parentName:"p"},"Yjs struct")," \u2192 ",(0,r.kt)("inlineCode",{parentName:"p"},"Lexical JSON"),"."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Lexical")," handles UI"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"@lexical/yjs")," writes diffs to ",(0,r.kt)("strong",{parentName:"li"},"Yjs")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Yjs")," only transmits ",(0,r.kt)("strong",{parentName:"li"},"Uint8Array diff packets")),(0,r.kt)("li",{parentName:"ol"},"Peers map back to Yjs struct \u2192 Lexical after receiving")),(0,r.kt)("p",null,"This achieves in collaborative editing:\n",(0,r.kt)("em",{parentName:"p"},"semantic completeness \u2715 minimal size \u2715 peer reconstruction")),(0,r.kt)("br",null),(0,r.kt)("br",null),(0,r.kt)("h2",{id:"references"},"References"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://deepwiki.com/yjs/yjs/1.1-architecture"},"DeepWiki - Yjs")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/facebook/lexical/tree/main/packages/lexical-yjs"},"Lexical-Yjs")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/yjs/yjs/blob/main/src/utils/UpdateEncoder.js"},"Yjs - UpdateEncoderV2")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/dmonad/lib0/blob/main/encoding.js"},"lib0 - Encoding"))),(0,r.kt)("br",null),(0,r.kt)("br",null))}s.isMDXComponent=!0}}]);