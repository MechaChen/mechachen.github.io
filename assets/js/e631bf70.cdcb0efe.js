"use strict";(self.webpackChunkbenson_doc=self.webpackChunkbenson_doc||[]).push([[5438],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>g});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var c=r.createContext({}),o=function(e){var t=r.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},u=function(e){var t=o(e.components);return r.createElement(c.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=o(a),m=n,g=d["".concat(c,".").concat(m)]||d[m]||p[m]||i;return a?r.createElement(g,s(s({ref:t},u),{},{components:a})):r.createElement(g,s({ref:t},u))}));function g(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,s=new Array(i);s[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[d]="string"==typeof e?e:n,s[1]=l;for(var o=2;o<i;o++)s[o]=a[o];return r.createElement.apply(null,s)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},2394:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>o});var r=a(7462),n=(a(7294),a(3905));const i={sidebar_position:1.3,sidebar_label:"[Chat System] Architecture - Message Syncer and Optimistic Update",title:"[Chat System] Architecture - Message Syncer and Optimistic Update",tags:["System Design","Architecture"]},s=void 0,l={unversionedId:"Plan/chat-system-architecture-message-scheduler-and-optimistic-update",id:"Plan/chat-system-architecture-message-scheduler-and-optimistic-update",title:"[Chat System] Architecture - Message Syncer and Optimistic Update",description:"Message Syncer and Optimistic Update",source:"@site/docs/Plan/chat-system-architecture-message-scheduler-and-optimistic-update.mdx",sourceDirName:"Plan",slug:"/Plan/chat-system-architecture-message-scheduler-and-optimistic-update",permalink:"/docs/Plan/chat-system-architecture-message-scheduler-and-optimistic-update",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Plan/chat-system-architecture-message-scheduler-and-optimistic-update.mdx",tags:[{label:"System Design",permalink:"/docs/tags/system-design"},{label:"Architecture",permalink:"/docs/tags/architecture"}],version:"current",sidebarPosition:1.3,frontMatter:{sidebar_position:1.3,sidebar_label:"[Chat System] Architecture - Message Syncer and Optimistic Update",title:"[Chat System] Architecture - Message Syncer and Optimistic Update",tags:["System Design","Architecture"]},sidebar:"tutorialSidebar",previous:{title:"[Chat System] Architecture - Network",permalink:"/docs/Plan/chat-system-architecture-network"},next:{title:"[Chat System] Architecture - High Level Design",permalink:"/docs/Plan/chat-system-architecture-high-level-design"}},c={},o=[{value:"Message Syncer and Optimistic Update",id:"message-syncer-and-optimistic-update",level:2},{value:"Reference",id:"reference",level:2}],u={toc:o},d="wrapper";function p(e){let{components:t,...a}=e;return(0,n.kt)(d,(0,r.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"message-syncer-and-optimistic-update"},"Message Syncer and Optimistic Update"),(0,n.kt)("p",null,"When the user sends out a message (or any update made by the user in general), we want to reflect the changes immediately. It is poor user experience to wait for the server's confirmation before showing an updated UI."),(0,n.kt)("p",null,"Hence outgoing chat messages/user actions are first inserted into the Client side storage instead and then marked as pending. Pending messages are also reflected immediately in the UI. And we can utilize the message status to indicate the various message delivery statuses."),(0,n.kt)("br",null),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Message Status"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"),(0,n.kt)("th",{parentName:"tr",align:null},"Messenger"),(0,n.kt)("th",{parentName:"tr",align:null},"WhatsApp"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Sending"),(0,n.kt)("td",{parentName:"tr",align:null},"Application is attempting to send the message"),(0,n.kt)("td",{parentName:"tr",align:null},"Empty circle"),(0,n.kt)("td",{parentName:"tr",align:null},"Clock icon")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Sent"),(0,n.kt)("td",{parentName:"tr",align:null},"Message was sent to the server successfully"),(0,n.kt)("td",{parentName:"tr",align:null},"Checkmark in outline circle"),(0,n.kt)("td",{parentName:"tr",align:null},"Single gray checkmark")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Delivered"),(0,n.kt)("td",{parentName:"tr",align:null},"Message delivered to the recipient"),(0,n.kt)("td",{parentName:"tr",align:null},"Checkmark in filled circle"),(0,n.kt)("td",{parentName:"tr",align:null},"Double gray checkmark")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Read"),(0,n.kt)("td",{parentName:"tr",align:null},"Recipient has read the message"),(0,n.kt)("td",{parentName:"tr",align:null},"Tiny version of user profile picture"),(0,n.kt)("td",{parentName:"tr",align:null},"Double blue checkmark (or ticks)")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Failed"),(0,n.kt)("td",{parentName:"tr",align:null},"Message failed to send"),(0,n.kt)("td",{parentName:"tr",align:null},"Exclamation icon in circle"),(0,n.kt)("td",{parentName:"tr",align:null},"Exclamation icon in circle")))),(0,n.kt)("br",null),(0,n.kt)("br",null),(0,n.kt)("br",null),(0,n.kt)("h2",{id:"reference"},"Reference"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"GreatFrontend - Google Docs"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://www.udemy.com/course/fundamentals-of-backend-communications-and-protocols/learn/lecture/34630282#overview"},"Hussein Nasser - Backend Communication Design Patterns - WebRTC"))),(0,n.kt)("br",null),(0,n.kt)("br",null))}p.isMDXComponent=!0}}]);