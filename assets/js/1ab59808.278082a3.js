"use strict";(self.webpackChunkbenson_doc=self.webpackChunkbenson_doc||[]).push([[4972],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>h});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=c(r),d=a,h=m["".concat(l,".").concat(d)]||m[d]||u[d]||s;return r?n.createElement(h,i(i({ref:t},p),{},{components:r})):n.createElement(h,i({ref:t},p))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=r.length,i=new Array(s);i[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[m]="string"==typeof e?e:a,i[1]=o;for(var c=2;c<s;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},8189:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var n=r(7462),a=(r(7294),r(3905));const s={sidebar_position:1.5,sidebar_label:"[Chat System] Architecture - High Level Design",title:"[Chat System] Architecture - High Level Design",tags:["Chat System","Architecture"]},i=void 0,o={unversionedId:"Plan/chat-system-architecture-high-level-design",id:"Plan/chat-system-architecture-high-level-design",title:"[Chat System] Architecture - High Level Design",description:"Here are the infrastructure components and their relationships and responsibilities:",source:"@site/docs/Plan/chat-system-architecture-high-level-design.mdx",sourceDirName:"Plan",slug:"/Plan/chat-system-architecture-high-level-design",permalink:"/docs/Plan/chat-system-architecture-high-level-design",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Plan/chat-system-architecture-high-level-design.mdx",tags:[{label:"Chat System",permalink:"/docs/tags/chat-system"},{label:"Architecture",permalink:"/docs/tags/architecture"}],version:"current",lastUpdatedAt:1749968604,formattedLastUpdatedAt:"Jun 15, 2025",sidebarPosition:1.5,frontMatter:{sidebar_position:1.5,sidebar_label:"[Chat System] Architecture - High Level Design",title:"[Chat System] Architecture - High Level Design",tags:["Chat System","Architecture"]},sidebar:"tutorialSidebar",previous:{title:"[Chat System] Architecture - Message Syncer and Optimistic Update",permalink:"/docs/Plan/chat-system-architecture-message-scheduler-and-optimistic-update"},next:{title:"[Chat System] Network and Performance",permalink:"/docs/Plan/chat-system-optimization"}},l={},c=[{value:"Infrastructure components",id:"infrastructure-components",level:3},{value:"Component responsibilities",id:"component-responsibilities",level:3}],p={toc:c},m="wrapper";function u(e){let{components:t,...r}=e;return(0,a.kt)(m,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("br",null),(0,a.kt)("p",null,"Here are the infrastructure components and their relationships and responsibilities:"),(0,a.kt)("img",{src:"/img/chat_app_infrastructure.jpg",alt:"Chat App Infrastructure"}),(0,a.kt)("h3",{id:"infrastructure-components"},"Infrastructure components"),(0,a.kt)("p",null,"\u2699\ufe0f Compute & Routing"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"HTTP Load Balancer"),"\uff1aDistributes REST API traffic evenly across HTTP servers to ensure scalability and high availability."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"WebSocket Load Balancer"),"\uff1aBalances long-lived WebSocket connections, helping the system handle many concurrent users reliably."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"EC2 Instances (HTTP)"),"\uff1aHandle stateless API operations like user creation and message history retrieval, allowing horizontal scaling."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"EC2 Instances (WebSocket)"),"\uff1aMaintain persistent connections for real-time features like sending/receiving messages, ensuring low-latency interaction.")),(0,a.kt)("p",null,"\ud83e\uded9 Data Storage"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"DynamoDB"),"\uff1aProvides ",(0,a.kt)("strong",{parentName:"li"},"fast read-write"),", ",(0,a.kt)("strong",{parentName:"li"},"scalable")," storage for various chat-related data: users, rooms, messages, and user-room relationships\u2014all with flexible schema support and high throughput.")),(0,a.kt)("p",null,"\u26a1\ufe0f Real-time Communication"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Redis"),"\uff1aStores WebSocket connection IDs and enables cross-server message broadcasting between WebSocket EC2 instances.")),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"component-responsibilities"},"Component responsibilities"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"HTTP ",(0,a.kt)("inlineCode",{parentName:"strong"},"GET /users")," endpoint"),"\uff1a ",(0,a.kt)("br",null)," Client sends a request to retrieve all user data. The backend queries ",(0,a.kt)("strong",{parentName:"p"},"User DynamoDB")," and returns the result.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"HTTP ",(0,a.kt)("inlineCode",{parentName:"strong"},"POST /users")," endpoint"),"\uff1a ",(0,a.kt)("br",null)," Client creates a new user. The backend processes the data and writes it to ",(0,a.kt)("strong",{parentName:"p"},"User DynamoDB"),".")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"HTTP ",(0,a.kt)("inlineCode",{parentName:"strong"},"GET /rooms/{room_id}/messages")," endpoint"),"\uff1a",(0,a.kt)("br",null)," Client requests the message history of a chat room. The backend fetches the messages from ",(0,a.kt)("strong",{parentName:"p"},"messages DynamoDB")," and returns them.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"WebSocket ",(0,a.kt)("inlineCode",{parentName:"strong"},"create_room")," action"),"\uff1a",(0,a.kt)("br",null)," Client sends a command to create a chat room via WebSocket. The backend stores the user-to-room relation in ",(0,a.kt)("strong",{parentName:"p"},"user","_","rooms DynamoDB"),".")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"WebSocket ",(0,a.kt)("inlineCode",{parentName:"strong"},"create_room")," (continued)"),"\uff1a",(0,a.kt)("br",null)," The system also creates the room metadata and stores it in ",(0,a.kt)("strong",{parentName:"p"},"rooms DynamoDB"),".")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"WebSocket ",(0,a.kt)("inlineCode",{parentName:"strong"},"create_message")," action"),"\uff1a",(0,a.kt)("br",null)," Client sends a new message via WebSocket. The backend stores it in ",(0,a.kt)("strong",{parentName:"p"},"messages DynamoDB"),".")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Redis Broadcast"),"\uff1a",(0,a.kt)("br",null)," The system uses ",(0,a.kt)("strong",{parentName:"p"},"Redis")," to store WebSocket connection IDs and serve as a broadcast intermediary. This allows different WS EC2 nodes to be aware of existing connections, enabling real-time message forwarding to users, even if they are connected to different servers."))),(0,a.kt)("br",null),(0,a.kt)("br",null))}u.isMDXComponent=!0}}]);