"use strict";(self.webpackChunkbenson_doc=self.webpackChunkbenson_doc||[]).push([[4103],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>k});var l=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,l,r=function(e,t){if(null==e)return{};var n,l,r={},a=Object.keys(e);for(l=0;l<a.length;l++)n=a[l],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(l=0;l<a.length;l++)n=a[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=l.createContext({}),s=function(e){var t=l.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=s(e.components);return l.createElement(d.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},c=l.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,d=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=s(n),c=r,k=p["".concat(d,".").concat(c)]||p[c]||m[c]||a;return n?l.createElement(k,o(o({ref:t},u),{},{components:n})):l.createElement(k,o({ref:t},u))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=c;var i={};for(var d in t)hasOwnProperty.call(t,d)&&(i[d]=t[d]);i.originalType=e,i[p]="string"==typeof e?e:r,o[1]=i;for(var s=2;s<a;s++)o[s]=n[s];return l.createElement.apply(null,o)}return l.createElement.apply(null,n)}c.displayName="MDXCreateElement"},4493:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var l=n(7462),r=(n(7294),n(3905));const a={sidebar_position:2.3,sidebar_label:"[Google Docs] Data Model",title:"[Google Docs] Data Model",tags:["System Design","Data Model"]},o=void 0,i={unversionedId:"Plan/google-doc-system-data-model",id:"Plan/google-doc-system-data-model",title:"[Google Docs] Data Model",description:"Why we need editor state model? Not just directly use DOM?",source:"@site/docs/Plan/google-doc-system-data-model.mdx",sourceDirName:"Plan",slug:"/Plan/google-doc-system-data-model",permalink:"/docs/Plan/google-doc-system-data-model",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Plan/google-doc-system-data-model.mdx",tags:[{label:"System Design",permalink:"/docs/tags/system-design"},{label:"Data Model",permalink:"/docs/tags/data-model"}],version:"current",lastUpdatedAt:1748617667,formattedLastUpdatedAt:"May 30, 2025",sidebarPosition:2.3,frontMatter:{sidebar_position:2.3,sidebar_label:"[Google Docs] Data Model",title:"[Google Docs] Data Model",tags:["System Design","Data Model"]},sidebar:"tutorialSidebar",previous:{title:"[Google Docs] Architecture - Rendering",permalink:"/docs/Plan/google-doc-system-architecture-rendering"},next:{title:"[Google Docs] Interface",permalink:"/docs/Plan/google-doc-system-interface"}},d={},s=[{value:"Why we need editor state model? Not just directly use DOM?",id:"why-we-need-editor-state-model-not-just-directly-use-dom",level:2},{value:"Data Model",id:"data-model",level:2},{value:"Simple version: Tree structure",id:"simple-version-tree-structure",level:3},{value:"Better version: Map with pointer children",id:"better-version-map-with-pointer-children",level:3},{value:"Performant version: Map with Linked List children",id:"performant-version-map-with-linked-list-children",level:3},{value:"Comparison",id:"comparison",level:2},{value:"References",id:"references",level:2}],u={toc:s},p="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,l.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("br",null),(0,r.kt)("h2",{id:"why-we-need-editor-state-model-not-just-directly-use-dom"},"Why we need editor state model? Not just directly use DOM?"),(0,r.kt)("p",null,"There are some reasons why we need a data model:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"\u274c Not able to support undo/redo"),(0,r.kt)("li",{parentName:"ol"},"\u274c Hard to handle custom elements"),(0,r.kt)("li",{parentName:"ol"},"\u274c DOM is too large"),(0,r.kt)("li",{parentName:"ol"},"\u274c DOM is often messed by browser extensions")),(0,r.kt)("br",null),(0,r.kt)("p",null,"Apparently, we need a data model to store the document state efficiently."),(0,r.kt)("br",null),(0,r.kt)("h2",{id:"data-model"},"Data Model"),(0,r.kt)("p",null,"To store data model, there are 2 ways to store the document:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"DOM like tree structure (e.g. ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/ianstormtaylor/slate"},"Slate"),", ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/quilljs/quill"},"Quill"),")"),(0,r.kt)("li",{parentName:"ul"},"Map with pointer children (e.g. ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/facebook/lexical"},"Lexical"),")")),(0,r.kt)("p",null,"For example, we have a document like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},"<root>\n  <h1>Benson's doc</h1>\n  <p>Hello <strong>World</strong></p>\n</root>\n")),(0,r.kt)("br",null),(0,r.kt)("h3",{id:"simple-version-tree-structure"},"Simple version: Tree structure"),(0,r.kt)("p",null,"The most simple way to store document is to imitate the DOM tree structure, but in JSON format."),(0,r.kt)("img",{src:"/img/dom-like-tree.png",width:"600",alt:"DOM like tree structure"}),(0,r.kt)("br",null),(0,r.kt)("br",null),(0,r.kt)("br",null),(0,r.kt)("p",null,"And here is the representation in code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'{\n  type: "root",\n  children: [\n    {\n      type: "h1",\n      children: [\n        { type: "text", text: "Benson\'s doc" },\n      ]\n    },\n    {\n      type: "paragraph",\n      children: [\n        { type: "text", text: "Hello " },\n        { type: "text", text: "World", format: \'bold\' }\n      ]\n    }\n  ]\n}\n\n')),(0,r.kt)("br",null),(0,r.kt)("br",null),(0,r.kt)("br",null),(0,r.kt)("h3",{id:"better-version-map-with-pointer-children"},"Better version: Map with pointer children"),(0,r.kt)("p",null,"The most performant way to store document is to use a map with pointer children because :"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"we can get and set the children in O(1) time."),(0,r.kt)("li",{parentName:"ul"},"we still can make children point to other nodes, to keep the tree relationship.")),(0,r.kt)("br",null),(0,r.kt)("img",{src:"/img/node-map.png",width:"600",alt:"Node map"}),(0,r.kt)("br",null),(0,r.kt)("br",null),(0,r.kt)("p",null,"And here is the representation in code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const nodeMap = {\n  Root: {\n    type: "root",\n    children: ["1", "3"]\n  },\n  "1": {\n    type: "h1",\n    children: ["2"]\n  },\n  "2": {\n    type: "text",\n    text: "Benson\'s doc"\n  },\n  "3": {\n    type: "paragraph",\n    children: ["4", "5"]\n  },\n  "4": {\n    type: "text",\n    text: "Hello "\n  },\n  "5": {\n    type: "text",\n    text: "World",\n    format: "bold"\n  }\n}\n')),(0,r.kt)("br",null),(0,r.kt)("p",null,"Advantages:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u2705 Single layer map, easy to clone, same for shallow and deep clone."),(0,r.kt)("li",{parentName:"ul"},"\u2705 O(1) access if know ",(0,r.kt)("inlineCode",{parentName:"li"},"NodeKey"))),(0,r.kt)("p",null,"Disadvantages:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u274c O(n) if children array is inserted new node or removed node.")),(0,r.kt)("br",null),(0,r.kt)("br",null),(0,r.kt)("br",null),(0,r.kt)("h3",{id:"performant-version-map-with-linked-list-children"},"Performant version: Map with Linked List children"),(0,r.kt)("p",null,"Because inserted new node or removing node is still not ideal, we can use a linked list to store the children."),(0,r.kt)("img",{src:"/img/node-linked-list-type.png",width:"700",alt:"Node linked list type"}),(0,r.kt)("br",null),(0,r.kt)("br",null),(0,r.kt)("br",null),(0,r.kt)("p",null,"And here is the representation in code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"interface EditorNode {\n  key: NodeKey | null,\n  parent: NodeKey | null,\n  prev: NodeKey | null,\n  next: NodeKey | null,\n}\n\ninterface ElementNode extends EditorNode {\n  firstChild: NodeKey | null,\n  lastChild: NodeKey | null,\n}\n\ninterface TextNode extends EditorNode {\n  text: string,\n}\n")),(0,r.kt)("br",null),(0,r.kt)("br",null),(0,r.kt)("br",null),(0,r.kt)("br",null),(0,r.kt)("p",null,"With the linked list node, we have the node map like this:"),(0,r.kt)("img",{src:"/img/node-map-with-linked-list.png",width:"550",alt:"Node map tree with linked list"}),(0,r.kt)("br",null),(0,r.kt)("br",null),(0,r.kt)("br",null),(0,r.kt)("br",null),(0,r.kt)("p",null,"And the tree will be like this:"),(0,r.kt)("img",{src:"/img/node-map-tree-with-linked-list.png",width:"650",alt:"Node map tree with linked list"}),(0,r.kt)("br",null),(0,r.kt)("br",null),(0,r.kt)("p",null,"Advantages:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u2705 Single layer map, easy to clone, same for shallow and deep clone."),(0,r.kt)("li",{parentName:"ul"},"\u2705 O(1) access if know ",(0,r.kt)("inlineCode",{parentName:"li"},"NodeKey")),(0,r.kt)("li",{parentName:"ul"},"\u2705 O(1) if children array is inserted new node or removed node.")),(0,r.kt)("p",null,"Disadvantages:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u274c Data structure is more complex, harder to understand.")),(0,r.kt)("br",null),(0,r.kt)("br",null),(0,r.kt)("br",null),(0,r.kt)("h2",{id:"comparison"},"Comparison"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Performance"),(0,r.kt)("th",{parentName:"tr",align:null},"Tree structure"),(0,r.kt)("th",{parentName:"tr",align:null},"Map with pointer children"),(0,r.kt)("th",{parentName:"tr",align:null},"Map with linked list children"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Clone shallow"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Access"),(0,r.kt)("td",{parentName:"tr",align:null},"O(n)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(m)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Insert/remove"),(0,r.kt)("td",{parentName:"tr",align:null},"O(n)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Complexity"),(0,r.kt)("td",{parentName:"tr",align:null},"\ud83d\udfe2"),(0,r.kt)("td",{parentName:"tr",align:null},"\ud83d\udfe1"),(0,r.kt)("td",{parentName:"tr",align:null},"\ud83d\udd34")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"n : all nodes length"),(0,r.kt)("li",{parentName:"ul"},"m : children array length")),(0,r.kt)("br",null),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"For performance reason, we should use the ",(0,r.kt)("strong",{parentName:"p"},"Map with linked list children"),".")),(0,r.kt)("br",null),(0,r.kt)("br",null),(0,r.kt)("h2",{id:"references"},"References"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.greatfrontend.com/questions/system-design/rich-text-editor#data-model"},"Great Frontend - Rich Text Editor - Data Model"))),(0,r.kt)("br",null),(0,r.kt)("br",null))}m.isMDXComponent=!0}}]);