"use strict";(self.webpackChunkbenson_doc=self.webpackChunkbenson_doc||[]).push([[3625],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>u});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),d=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=d(e.components);return n.createElement(c.Provider,{value:t},e.children)},v="mdxType",o={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,l=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),v=d(r),h=a,u=v["".concat(c,".").concat(h)]||v[h]||o[h]||l;return r?n.createElement(u,i(i({ref:t},p),{},{components:r})):n.createElement(u,i({ref:t},p))}));function u(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=r.length,i=new Array(l);i[0]=h;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[v]="string"==typeof e?e:a,i[1]=s;for(var d=2;d<l;d++)i[d]=r[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}h.displayName="MDXCreateElement"},6970:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>o,frontMatter:()=>l,metadata:()=>s,toc:()=>d});var n=r(7462),a=(r(7294),r(3905));const l={sidebar__label:"[Graph] 2. Graph \u7684\u57fa\u672c\u904b\u7b97",title:"[Graph] 2. Graph \u7684\u57fa\u672c\u904b\u7b97"},i=void 0,s={unversionedId:"Code/graph-2-operation",id:"Code/graph-2-operation",title:"[Graph] 2. Graph \u7684\u57fa\u672c\u904b\u7b97",description:"Graph \u7684\u57fa\u672c\u904b\u7b97",source:"@site/docs/Code/graph-2-operation.mdx",sourceDirName:"Code",slug:"/Code/graph-2-operation",permalink:"/zh-tw/docs/Code/graph-2-operation",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Code/graph-2-operation.mdx",tags:[],version:"current",lastUpdatedAt:1730169197,formattedLastUpdatedAt:"2024\u5e7410\u670829\u65e5",frontMatter:{sidebar__label:"[Graph] 2. Graph \u7684\u57fa\u672c\u904b\u7b97",title:"[Graph] 2. Graph \u7684\u57fa\u672c\u904b\u7b97"},sidebar:"tutorialSidebar",previous:{title:"[Graph] 1. \u4ec0\u9ebc\u662f Graph?",permalink:"/zh-tw/docs/Code/graph-1-intro"},next:{title:"[Graph] 3. Graph traversal - DFS & BFS",permalink:"/zh-tw/docs/Code/graph-3-traversal"}},c={},d=[{value:"Graph \u7684\u57fa\u672c\u904b\u7b97",id:"graph-\u7684\u57fa\u672c\u904b\u7b97",level:2},{value:"\u52a0\u5165 Vertex",id:"\u52a0\u5165-vertex",level:3},{value:"\u52a0\u5165 Edge",id:"\u52a0\u5165-edge",level:3},{value:"\u79fb\u9664 Edge",id:"\u79fb\u9664-edge",level:3},{value:"\u79fb\u9664 Vertex",id:"\u79fb\u9664-vertex",level:3},{value:"\u5b8c\u6574\u7a0b\u5f0f\u78bc",id:"\u5b8c\u6574\u7a0b\u5f0f\u78bc",level:3},{value:"JS Graph \u7684\u5feb\u901f\u5be6\u73fe",id:"js-graph-\u7684\u5feb\u901f\u5be6\u73fe",level:2},{value:"\u7d50\u8ad6",id:"\u7d50\u8ad6",level:2},{value:"\u53c3\u8003\u8cc7\u6599",id:"\u53c3\u8003\u8cc7\u6599",level:3}],p={toc:d},v="wrapper";function o(e){let{components:t,...r}=e;return(0,a.kt)(v,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"graph-\u7684\u57fa\u672c\u904b\u7b97"},"Graph \u7684\u57fa\u672c\u904b\u7b97"),(0,a.kt)("p",null,"\u6211\u5011\u6703\u4ee5 Adjacency List + Undirected Graph \u7684\u524d\u63d0\u4f86\u5be6\u4f5c\uff0c\u5f8c\u7e8c\u8981\u8f49\u6210 Directed Graph \u4e5f\u5f88\u5bb9\u6613\u3002\n\u7e3d\u7684\u4f86\u8aaa\uff0cGraph \u7684\u57fa\u672c\u904b\u7b97\u6709 4 \u500b\uff1a"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Add Vertex"),(0,a.kt)("li",{parentName:"ul"},"Add Edge"),(0,a.kt)("li",{parentName:"ul"},"Remove Edge"),(0,a.kt)("li",{parentName:"ul"},"Remove Vertex")),(0,a.kt)("p",null,"\u6211\u5011\u5148\u4ee5 Class \u7684\u65b9\u5f0f\u5efa\u7acb Graph\uff0c\u4e26\u5148\u5beb\u51fa\u5176\u57fa\u672c data structure\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"class Graph {\n    constructor() {\n        this.adjacencyList = [];\n    }\n}\n")),(0,a.kt)("br",null),(0,a.kt)("br",null),(0,a.kt)("p",null,"\u63a5\u8457\u6211\u5011\u4f86\u4e00\u6b65\u6b65\u5be6\u73fe\u9019 4 \u500b methods\uff1a"),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"\u52a0\u5165-vertex"},"\u52a0\u5165 Vertex"),(0,a.kt)("p",null,"\u52a0\u5165 vertex \u5f88\u7c21\u55ae\uff0c\u53ea\u8981\u5728 adjacency list \u4e2d\u65b0\u589e\u4e00\u500b index / key \u4e26\u7d66\u4ed6\u4e00\u500b\u7a7a\u9663\u5217\u5373\u53ef"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"class Graph {\n    ...\n    addVertex(vertex) {\n        if (!this.adjacencyList[vertex]) {\n            this.adjacencyList[vertex] = [];\n        }\n    }\n}\n")),(0,a.kt)("br",null),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"\u52a0\u5165-edge"},"\u52a0\u5165 Edge"),(0,a.kt)("p",null,"\u52a0\u5165 edge\uff0c\u6211\u5011\u9700\u8981\u5148\u78ba\u8a8d\u5c0d\u61c9\u7684 vertex \u662f\u5426\u5b58\u5728\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u7684\u8a71\uff0c\u6211\u5011\u9700\u8981\u5148\u52a0\u5165 vertex"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"class Graph {\n    ...\n    addEdge(vertex1, vertex2) {\n        if (!this.adjacencyList[vertex1]) {\n            this.addVertex(vertex1);\n        }\n        if (!this.adjacencyList[vertex2]) {\n            this.addVertex(vertex2);\n        }\n\n        this.adjacencyList[vertex1].push(vertex2);\n        this.adjacencyList[vertex2].push(vertex1);\n    }\n}\n")),(0,a.kt)("br",null),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"\u79fb\u9664-edge"},"\u79fb\u9664 Edge"),(0,a.kt)("p",null,"\u79fb\u9664 edge \u9700\u8981\u50b3\u5165\u5169\u500b vertex\uff0c\u4e26\u5206\u5225\u5728\u5169\u500b vertex \u7684 adjacency list \u4e2d\u5c07\u5c0d\u65b9\u7684 vertex \u79fb\u9664"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"class Graph {\n    ...\n    removeEdge(vertex1, vertex2) {\n        this.adjacencyList[vertex1] = this.adjacencyList[vertex1]\n            .filter(v => v !== vertex2);\n\n        this.adjacencyList[vertex2] = this.adjacencyList[vertex2]\n            .filter(v => v !== vertex1);\n    }\n}\n")),(0,a.kt)("br",null),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"\u79fb\u9664-vertex"},"\u79fb\u9664 Vertex"),(0,a.kt)("p",null,"\u79fb\u9664 vertex V1\uff0c\u6211\u5011\u9700\u8981 V1 \u7684 adjacency list \u4e2d\u6240\u6709 vertex \u79fb\u9664\uff0c\u4e26\u79fb\u9664 vertex \u8ddf V1 \u7684 Edge\uff0c\u4e26\u4e14\u6700\u5f8c\u518d\u628a V1 adjacency list \u79fb\u9664"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"class Graph {\n    ...\n    removeVertex(vertex) {\n        while (this.adjacencyList[vertex].length) {\n            const adjacentVertex = this.adjacencyList[vertex].pop();\n            this.removeEdge(vertex, adjacentVertex);\n        }\n\n        delete this.adjacencyList[vertex];\n    }\n}\n")),(0,a.kt)("br",null),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"\u5b8c\u6574\u7a0b\u5f0f\u78bc"},"\u5b8c\u6574\u7a0b\u5f0f\u78bc"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"class Graph {\n    constructor() {\n        this.adjacencyList = [];\n    }\n\n    addVertex(vertex) {\n        if (!this.adjacencyList[vertex]) {\n            this.adjacencyList[vertex] = [];\n        }\n    }\n\n    addEdge(vertex1, vertex2) {\n        if (!this.adjacencyList[vertex1]) {\n            this.addVertex(vertex1);\n        }\n        if (!this.adjacencyList[vertex2]) {\n            this.addVertex(vertex2);\n        }\n\n        this.adjacencyList[vertex1].push(vertex2);\n        this.adjacencyList[vertex2].push(vertex1);\n    }\n\n    removeEdge(vertex1, vertex2) {\n        this.adjacencyList[vertex1] = this.adjacencyList[vertex1]\n            .filter(v => v !== vertex2);\n\n        this.adjacencyList[vertex2] = this.adjacencyList[vertex2]\n            .filter(v => v !== vertex1);\n    }\n\n    removeVertex(vertex) {\n        while (this.adjacencyList[vertex].length) {\n            const adjacentVertex = this.adjacencyList[vertex].pop();\n            this.removeEdge(vertex, adjacentVertex);\n        }\n\n        delete this.adjacencyList[vertex];\n    }\n}\n")),(0,a.kt)("br",null),(0,a.kt)("br",null),(0,a.kt)("h2",{id:"js-graph-\u7684\u5feb\u901f\u5be6\u73fe"},"JS Graph \u7684\u5feb\u901f\u5be6\u73fe"),(0,a.kt)("p",null,"\u9664\u4e86\u7528 Class \u5be6\u4f5c\uff0c\u6211\u5011\u4e5f\u53ef\u4ee5\u7528 Js \u7684 array / object literal \u4f86\u5feb\u901f\u5be6\u4f5c\uff0c\u9019\u6a23\u7684\u597d\u8655\u662f\u6bd4\u8f03\u76f4\u89c0\uff0c\u5e6b\u52a9\u6211\u5011\u5728\u9762\u8a66\u6642\u5feb\u901f\u5be6\u4f5c"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Array")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:"showLineNumbers",showLineNumbers:!0},"const graph = [];\n\nfunction addVertex(vertex) {\n    if (!graph[vertex]) {\n        graph[vertex] = [];\n    }\n}\n\nfunction addEdge(vertex1, vertex2) {\n    if (!(vertex1 in graph)) addVertex(vertex1);\n    if (!(vertex2 in graph)) addVertex(vertex2);\n\n    graph[vertex1].push(vertex2);\n    graph[vertex2].push(vertex1);\n}\n\nfunction removeEdge(vertex1, vertex2) {\n    if (graph[vertex1]) graph[vertex1] = graph[vertex1].filter(v => v !== vertex2);\n    if (graph[vertex2]) graph[vertex2] = graph[vertex2].filter(v => v !== vertex1);\n}\n\nfunction removeVertex(vertex) {\n    while (graph[vertex].length) {\n        const adjacentVertex = graph[vertex].pop();\n        removeEdge(vertex, adjacentVertex);\n    }\n\n    delete graph[vertex];\n}\n")),(0,a.kt)("br",null),(0,a.kt)("br",null),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Object Literal")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:"showLineNumbers",showLineNumbers:!0},"const graph = {};\n\nfunction addVertex(vertex) {\n    if (!graph[vertex]) {\n        graph[vertex] = [];\n    }\n}\n\nfunction addEdge(vertex1, vertex2) {\n    if (!(vertex1 in graph)) addVertex(vertex1);\n    if (!(vertex2 in graph)) addVertex(vertex2);\n\n    graph[vertex1].push(vertex2);\n    graph[vertex2].push(vertex1);\n}\n\nfunction removeEdge(vertex1, vertex2) {\n    if (vertex1 in graph) graph[vertex1] = graph[vertex1].filter(v => v !== vertex2);\n    if (vertex2 in graph) graph[vertex2] = graph[vertex2].filter(v => v !== vertex1);\n}\n\nfunction removeVertex(vertex) {\n    while (graph[vertex].length) {\n        const adjacentVertex = graph[vertex].pop();\n        removeEdge(vertex, adjacentVertex);\n    }\n\n    delete graph[vertex];\n}\n")),(0,a.kt)("br",null),(0,a.kt)("br",null),(0,a.kt)("h2",{id:"\u7d50\u8ad6"},"\u7d50\u8ad6"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Graph \u7684\u57fa\u672c\u904b\u7b97\u6709 4 \u500b\uff1a",(0,a.kt)("inlineCode",{parentName:"li"},"Add Vertex"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"Add Edge"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"Remove Edge"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"Remove Vertex")),(0,a.kt)("li",{parentName:"ol"},"\u5728\u505a\u57fa\u672c\u904b\u7b97\u6642\uff0cvertex \u7684\u904b\u7b97\u9700\u8981\u8003\u616e Edge\uff0cEdge \u7684\u904b\u7b97\u9700\u8981\u8003\u616e vertex"),(0,a.kt)("li",{parentName:"ol"},"Graph \u53ef\u4ee5\u7528 Class \u5be6\u73fe\uff0c\u5728 JS \u4e5f\u53ef\u4ee5\u7528 Array / Object Literal \u5feb\u901f\u5be6\u73fe")),(0,a.kt)("br",null),(0,a.kt)("br",null),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"\u53c3\u8003\u8cc7\u6599"},"\u53c3\u8003\u8cc7\u6599"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://www.udemy.com/course/js-algorithms-and-data-structures-masterclass/?couponCode=KEEPLEARNING"},"Colt Steele - JavaScript Algorithms and Data Structures Masterclass")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://www.youtube.com/watch?v=cWNEl4HE2OE"},"Firebase - Graph Search Algorithms in 100 Seconds - And Beyond with JS"))),(0,a.kt)("br",null),(0,a.kt)("br",null))}o.isMDXComponent=!0}}]);