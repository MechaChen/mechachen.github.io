"use strict";(self.webpackChunkbenson_doc=self.webpackChunkbenson_doc||[]).push([[7208],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>d});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},s=Object.keys(e);for(a=0;a<s.length;a++)r=s[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)r=s[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),c=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,s=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(r),h=n,d=p["".concat(l,".").concat(h)]||p[h]||m[h]||s;return r?a.createElement(d,o(o({ref:t},u),{},{components:r})):a.createElement(d,o({ref:t},u))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=r.length,o=new Array(s);o[0]=h;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[p]="string"==typeof e?e:n,o[1]=i;for(var c=2;c<s;c++)o[c]=r[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}h.displayName="MDXCreateElement"},7396:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var a=r(7462),n=(r(7294),r(3905));const s={sidebar_position:1.3,sidebar_label:"[Chat App] Data Structure",title:"[Chat App] Data Structure",tags:["Chat System","Data Structure"]},o=void 0,i={unversionedId:"Plan/chat-system-data-structure",id:"Plan/chat-system-data-structure",title:"[Chat App] Data Structure",description:"For chat app, we need to store the following data:",source:"@site/docs/Plan/chat-system-data-structure.mdx",sourceDirName:"Plan",slug:"/Plan/chat-system-data-structure",permalink:"/zh-tw/docs/Plan/chat-system-data-structure",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Plan/chat-system-data-structure.mdx",tags:[{label:"Chat System",permalink:"/zh-tw/docs/tags/chat-system"},{label:"Data Structure",permalink:"/zh-tw/docs/tags/data-structure"}],version:"current",lastUpdatedAt:1750006365,formattedLastUpdatedAt:"2025\u5e746\u670815\u65e5",sidebarPosition:1.3,frontMatter:{sidebar_position:1.3,sidebar_label:"[Chat App] Data Structure",title:"[Chat App] Data Structure",tags:["Chat System","Data Structure"]},sidebar:"tutorialSidebar",previous:{title:"[Chat App] Architecture - Network",permalink:"/zh-tw/docs/Plan/chat-system-architecture-network"},next:{title:"[Chat App] Interface",permalink:"/zh-tw/docs/Plan/chat-system-interface"}},l={},c=[{value:"User",id:"user",level:2},{value:"Room list of the participant",id:"room-list-of-the-participant",level:2},{value:"Message list of the room",id:"message-list-of-the-room",level:2},{value:"Draft message",id:"draft-message",level:2},{value:"Reference",id:"reference",level:2}],u={toc:c},p="wrapper";function m(e){let{components:t,...r}=e;return(0,n.kt)(p,(0,a.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"For chat app, we need to store the following data:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"User"),(0,n.kt)("li",{parentName:"ol"},"Room"),(0,n.kt)("li",{parentName:"ol"},"Message")),(0,n.kt)("br",null),(0,n.kt)("h2",{id:"user"},"User"),(0,n.kt)("p",null,"User is a person who can send and receive messages in the chat room."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-tsx"},"type User = {\n  id: string, // unique identifier of the user\n  name: string, // a name of the user shown on the UI\n  avatar?: string, // the image representation of the user\n}\n")),(0,n.kt)("br",null),(0,n.kt)("h2",{id:"room-list-of-the-participant"},"Room list of the participant"),(0,n.kt)("p",null,"Room is a place where participants can join to start chatting."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-tsx"},"type Room = {\n  id: string, // unique identifier of the room\n  participants: User[], // participants of the room\n  createdAt?: Date, // the time when the room is created\n  lastMessage?: string, // the last message of the room\n  lastMessageAt?: Date, // the time when the last message is sent\n}\n\ntype UserRooms = Room[]; // a list of rooms of the current user\n")),(0,n.kt)("br",null),(0,n.kt)("h2",{id:"message-list-of-the-room"},"Message list of the room"),(0,n.kt)("p",null,"Message is a content sent by participants in the room"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-tsx"},"type Message = {\n  roomId: string, // the room id of the message\n  messageId: string, // unique identifier of the message generated by client\n  content: string, // the content of the message\n  senderId: string, // the id of the user who sent the message\n  createdAt: Date, // the time when the message is sent\n  status: 'pending' | 'in-flight' | 'success' | 'failed', // the status of the message\n}\n\ntype Messages = Message[];\n")),(0,n.kt)("br",null),(0,n.kt)("h2",{id:"draft-message"},"Draft message"),(0,n.kt)("p",null,"Draft message is a message that is still left in input, we can store it and restore it when the user re-open the chat room."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-tsx"},"type DraftMessage = {\n  userIdAndRoomId: string, // take as the client storage key\n  message: string, // the content of the message\n  fileList?: File[], // the list of files attached to the message\n}\n")),(0,n.kt)("br",null),(0,n.kt)("br",null),(0,n.kt)("h2",{id:"reference"},"Reference"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"GreatFrontend - Chat App")),(0,n.kt)("br",null),(0,n.kt)("br",null))}m.isMDXComponent=!0}}]);