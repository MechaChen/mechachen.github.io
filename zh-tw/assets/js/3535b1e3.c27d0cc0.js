"use strict";(self.webpackChunkbenson_doc=self.webpackChunkbenson_doc||[]).push([[6919],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),u=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(o.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,o=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=u(n),p=a,h=d["".concat(o,".").concat(p)]||d[p]||m[p]||s;return n?r.createElement(h,l(l({ref:t},c),{},{components:n})):r.createElement(h,l({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,l=new Array(s);l[0]=p;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i[d]="string"==typeof e?e:a,l[1]=i;for(var u=2;u<s;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},9347:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const s={sidebar_position:1,sidebar_label:"[Chat System] Requirements",title:"[Chat System] Requirements",tags:["Chat System","Architecture"]},l=void 0,i={unversionedId:"Plan/chat-system-data-structure-and-interface",id:"Plan/chat-system-data-structure-and-interface",title:"[Chat System] Requirements",description:"Please design a chat system like following video:",source:"@site/docs/Plan/chat-system-data-structure-and-interface.mdx",sourceDirName:"Plan",slug:"/Plan/chat-system-data-structure-and-interface",permalink:"/zh-tw/docs/Plan/chat-system-data-structure-and-interface",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Plan/chat-system-data-structure-and-interface.mdx",tags:[{label:"Chat System",permalink:"/zh-tw/docs/tags/chat-system"},{label:"Architecture",permalink:"/zh-tw/docs/tags/architecture"}],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,sidebar_label:"[Chat System] Requirements",title:"[Chat System] Requirements",tags:["Chat System","Architecture"]},sidebar:"tutorialSidebar",previous:{title:"[Catalog] System Design",permalink:"/zh-tw/docs/Plan/system-design-catelog"},next:{title:"[Chat System] Requirements",permalink:"/zh-tw/docs/Plan/chat-system-requirements"}},o={},u=[{value:"Requirements",id:"requirements",level:2},{value:"Rendering approach",id:"rendering-approach",level:3},{value:"Data structure",id:"data-structure",level:2},{value:"Interface",id:"interface",level:2}],c={toc:u},d="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Please design a chat system like following video:"),(0,a.kt)("video",{controls:!0,width:"700px",src:"https://github.com/user-attachments/assets/8316b8db-1616-4842-b5e2-182e083446c1",alt:"Chat System Functional Requirements"}),(0,a.kt)("h2",{id:"requirements"},"Requirements"),(0,a.kt)("p",null,"As the candidate, it is important to understand the functional (basic) requirements first."),(0,a.kt)("p",null,"Here are some questions we can ask the interviewer to clarify the requirements:"),(0,a.kt)("table",null,(0,a.kt)("tr",null,(0,a.kt)("td",null,"\ud83e\uddd1\u200d\ud83c\udf93 Candidate"),(0,a.kt)("td",null,"\ud83e\uddd1\u200d\ud83c\udfeb Interviewer")),(0,a.kt)("tr",null,(0,a.kt)("td",null,(0,a.kt)("b",null,"What are the core functionalities needed?")),(0,a.kt)("td",null,(0,a.kt)("ul",null,(0,a.kt)("li",null,"Sending a message to a user."),(0,a.kt)("li",null,"Getting user's chat room list."),(0,a.kt)("li",null,"Receiving messages from a user."),(0,a.kt)("li",null,"See one's chat history with a user.")))),(0,a.kt)("tr",null,(0,a.kt)("td",null,(0,a.kt)("b",null,"Is the message receiving real-time?")),(0,a.kt)("td",null,"Yes, users should receive messages in real-time, as fast as possible without having to refresh the page")),(0,a.kt)("tr",null,(0,a.kt)("td",null,(0,a.kt)("b",null,"What kind of message formats should be supported?")),(0,a.kt)("td",null,"Let's support formats text at first. We can discuss supporting emojis, images if there's time.")),(0,a.kt)("tr",null,(0,a.kt)("td",null,(0,a.kt)("b",null,"What kind of chat app shall we design? 1 on 1 or group based?")),(0,a.kt)("td",null,"It should support both 1 on 1 and group chat.")),(0,a.kt)("tr",null,(0,a.kt)("td",null,(0,a.kt)("b",null,"Is there a message size limit?")),(0,a.kt)("td",null,"Yes, text length should be less than 100,000 characters long.")),(0,a.kt)("tr",null,(0,a.kt)("td",null,(0,a.kt)("b",null,"How long shall we store the chat history?")),(0,a.kt)("td",null,"Forever.")),(0,a.kt)("tr",null,(0,a.kt)("td",null,(0,a.kt)("b",null,"Should the messages be updated in real-time?")),(0,a.kt)("td",null,"Yes, users should see the messages in real-time."))),(0,a.kt)("br",null),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"rendering-approach"},"Rendering approach"),(0,a.kt)("p",null,"We will choose ",(0,a.kt)("b",null,"CSR"),", because it is high interactive and chat system's data should not be crawled by search engines."),(0,a.kt)("br",null),(0,a.kt)("h2",{id:"data-structure"},"Data structure"),(0,a.kt)("p",null,"Create room inputs:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"type User = {\n  id: string,\n  name: string,\n  password: string,\n}\n")),(0,a.kt)("br",null),(0,a.kt)("p",null,"User room lists"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"type Room = {\n  id: string,\n  participants: User[],\n  createdAt: Date,\n}\n")),(0,a.kt)("br",null),(0,a.kt)("p",null,"Chat room"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"type Message = {\n  roomId: string,\n  id: string,\n  content: string,\n  senderId: string,\n  createdAt: Date,\n  status: 'in-flight' | 'success' | 'failed',\n}\n\ntype DraftMessage = {\n  userIdAndRoomId: string,\n  message: string,\n  fileList?: File[],\n}\n")),(0,a.kt)("br",null),(0,a.kt)("h2",{id:"interface"},"Interface"),(0,a.kt)("p",null,"Chat room inputs:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"HTTP: \n- GET /users\n(- POST /rooms) \n// there are 2 options, \n// 1. create room by HTTP request and get real time new room by SSE\n// 2. create room and get real time new room list by WebSocket if with Serverless architecture\n\nWebSocket:\n- actions: create_room\n")),(0,a.kt)("br",null),(0,a.kt)("p",null,"User room lists:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"HTTP:\nGET /rooms\n\nWebSocket:\n- listen actions: create_room\n\n(SSE:\n- listen actions: create_room\n)\n")),(0,a.kt)("br",null),(0,a.kt)("p",null,"Chat room:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"HTTP:\n- POST /rooms/:roomId/messages\n\nWebSocket:\n- actions:\n    - create_connection\n    - create_message\n    - delete_connection\n- listen actions:\n    - create_message\n")))}m.isMDXComponent=!0}}]);